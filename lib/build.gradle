/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // Tool for generating code coverage reports
    id 'jacoco'

    // Mutation testing
    alias libs.plugins.pitest

    // The Checkstyle plugin performs quality checks on your projectâ€™s Java source files using Checkstyle and
    // generates reports from these checks.
    alias libs.plugins.checkstyle

    // Formatting codes
    alias libs.plugins.spotless
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    // jsoup HTML parser library @ https://jsoup.org/
    implementation libs.jsoup

    // The uber-fast, ultra-lightweight classpath and module scanner for JVM languages
    implementation libs.classgraph

    //  Gson is a Java library that can be used to convert Java Objects into their JSON representation.
    //  It can also be used to convert a JSON string to an equivalent Java object.
    implementation libs.gson
}

pitest {
    junit5PluginVersion = '1.2.0'
    targetClasses = [
            'com.github.khshourov.dictionaryscraper.*'
    ] // Classes to mutate
    targetTests = [
            'com.github.khshourov.dictionaryscraper.*'
    ]
}

checkstyle {
    toolVersion = '10.20.1'
    // Directly copied from: https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml
    configFile = file("${project.rootDir}/checkstyle.xml")
}

// Directly copied from: https://github.com/diffplug/spotless/tree/main/plugin-gradle#java
spotless {
    java {
        // Use the default importOrder configuration
        importOrder()
        // optional: you can specify import groups directly
        // note: you can use an empty string for all the imports you didn't specify explicitly, '|' to join group without blank line, and '\\#` prefix for static imports
        // importOrder('java|javax', 'com.acme', '', '\\#com.acme', '\\#')
        // optional: instead of specifying import groups directly you can specify a config file
        // export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder
        // importOrderFile('eclipse-import-order.txt') // import order file as exported from eclipse

        removeUnusedImports()

        // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
        cleanthat()

        googleJavaFormat()

        formatAnnotations()  // fixes formatting of type annotations

        // licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    withSourcesJar()

    withJavadocJar()
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
