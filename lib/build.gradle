/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'base'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    id 'jvm-test-suite'

    // Tool for generating code coverage reports
    id 'jacoco'

    // Mutation testing
    alias libs.plugins.pitest

    // The Checkstyle plugin performs quality checks on your projectâ€™s Java source files using Checkstyle and
    // generates reports from these checks.
    alias libs.plugins.checkstyle

    // Formatting codes
    alias libs.plugins.spotless

    // To help analyzing projects with SonarQube
    alias libs.plugins.sonarqube

    // Plugin for publishing into maven central
    alias libs.plugins.maven.publish
    alias libs.plugins.jreleaser
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava

    // jsoup HTML parser library @ https://jsoup.org/
    implementation libs.jsoup

    // The uber-fast, ultra-lightweight classpath and module scanner for JVM languages
    implementation libs.classgraph

    //  Gson is a Java library that can be used to convert Java Objects into their JSON representation.
    //  It can also be used to convert a JSON string to an equivalent Java object.
    implementation libs.gson
}

base {
    archivesName = rootProject.name
}

version = '1.0.0'
group = 'io.github.khshourov'

pitest {
    junit5PluginVersion = '1.2.0'
    targetClasses = [
            'io.github.khshourov.dictionaryscraper.*'
    ] // Classes to mutate
    targetTests = [
            'io.github.khshourov.dictionaryscraper.*'
    ]
}

checkstyle {
    toolVersion = '10.20.1'
    // Directly copied from: https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml
    configFile = file("${project.rootDir}/checkstyle.xml")
}

// Directly copied from: https://github.com/diffplug/spotless/tree/main/plugin-gradle#java
spotless {
    java {
        // Use the default importOrder configuration
        importOrder()
        // optional: you can specify import groups directly
        // note: you can use an empty string for all the imports you didn't specify explicitly, '|' to join group without blank line, and '\\#` prefix for static imports
        // importOrder('java|javax', 'com.acme', '', '\\#com.acme', '\\#')
        // optional: instead of specifying import groups directly you can specify a config file
        // export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder
        // importOrderFile('eclipse-import-order.txt') // import order file as exported from eclipse

        removeUnusedImports()

        // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
        cleanthat()

        googleJavaFormat()

        formatAnnotations()  // fixes formatting of type annotations

        // licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
    }
}

tasks.jacocoTestReport {
    reports {
        // SonarQube only understands XML
        xml.required.set true
        html.required.set false
        csv.required.set false
    }
}

sonar {
    properties {
        property 'sonar.projectName', base.archivesName
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.host.url', System.getProperty('sonar.host.url')
        property 'sonar.projectKey', System.getProperty('sonar.projectKey')
        property 'sonar.token', System.getProperty('sonar.token')
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    withSourcesJar()

    withJavadocJar()
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }

        integrationTest(JvmTestSuite) {
            dependencies {
                implementation project()
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.integrationTest)
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'io.github.khshourov'
            artifactId = 'dictionaryscraper'

            from components.java

            pom {
                name = 'Dictionary Scraper'
                description = 'Scrape dictionaries such as Cambridge and Oxford to generate structured data for a given word search'
                url = 'https://github.com/khshourov/dictionary-scraper-java'
                inceptionYear = '2024'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://github.com/khshourov/dictionary-scraper-java/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'khshourov'
                        name = 'Kamrul H Shourov'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/khshourov/dictionary-scraper-java.git'
                    developerConnection = 'scm:git:git@github.com:khshourov/dictionary-scraper-java.git'
                    url = 'https://github.com/khshourov/dictionary-scraper-java'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('target/staging-deploy')
                }
            }
        }
    }
}